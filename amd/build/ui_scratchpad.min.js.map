{"version":3,"file":"ui_scratchpad.min.js","sources":["../src/ui_scratchpad.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementation of the html_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin replaces the usual textarea answer element with a div\n * containing the author-supplied HTML. The serialisation of that HTML,\n * which is what is essentially copied back into the textarea for submissions\n * as the answer, is a JSON object. The fields of that object are the names\n * of all author-supplied HTML elements with a class 'coderunner-ui-element';\n * all such objects are expected to have a 'name' attribute as well. The\n * associated field values are lists. Each list contains all the values, in\n * document order, of the results of calling the jquery val() method in turn\n * on each of the UI elements with that name.\n * This means that at least input, select and textarea\n * elements are supported. The author is responsible for checking the\n * compatibility of other elements with jquery's val() method.\n *\n * The HTML to use in the answer area must be provided as the contents of\n * either the globalextra field or the prototypeextra field in the question\n * authoring form. The choice of which is set by the html_src UI parameter, which\n * must be either 'globalextra' or 'prototypeextra'.\n *\n * If any fields of the answer html are to be preloaded, these should be specified\n * in the answer preload with json of the form '{\"<fieldName>\": \"<fieldValueList>\",...}'\n * where fieldValueList is a list of all the values to be assigned to the fields\n * with the given name, in document order.\n *\n * To accommodate the possibility of dynamic HTML, any leftover preload values,\n * that is, values that cannot be positioned within the HTML either because\n * there is no field of the required name or because, in the case of a list,\n * there are insufficient elements, are assigned to the data['leftovers']\n * attribute of the outer html div, as a sub-object of the original object.\n * This outer div can be located as the 'closest' (in a jQuery sense)\n * div.qtype-coderunner-html-outer-div. The author-supplied HTML must include\n * JavaScript to make use of the 'leftovers'.\n *\n * As a special case of the serialisation, if all values in the serialisation\n * are either empty strings or a list of empty strings, the serialisation is\n * itself the empty string.\n *\n * @module coderunner/ui_html\n * @copyright  Richard Lobb, 2022, The University of Canterbury\n * @copyright  James Napier, 2022, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function ($) {\n    const RESULT_SUCCESS = 15; // Code for a correct Jobe run.\n    const DEFUALT_MAX_OUTPUT_LEN = 30000;\n\n\n    /**\n     * Escape text special HTML characters.\n     * @param {string} text\n     * @returns {string} text with various special chars replaced with equivalent\n     * html entities. Newlines are replaced with <br>.\n     */\n    function escapeHtml(text) {\n        const map = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#039;'\n        };\n\n        return text.replace(/[&<>\"']/g, function (m) {\n            return map[m];\n        });\n    }\n\n\n    /**\n     * Analyse the response for errors. There are two sorts of error: sandbox failures,\n     * for which the field response.error is non-zero meaning the run didn't take\n     * place at all and failures in the run\n     * itself, such as compile errors, timeouts, runtime errors etc. The\n     * various codes are documented in the CodeRunner file sandbox.php.\n     * Some error returns, notably compilation error and runtime error, are not\n     * treated as errors here, since the stdout + stderr should reveal what\n     * happened anyway. More obscure errors are lumped together as 'Unknown\n     * runtime error'.\n     * @param {object} response The response from the web-service sandbox request.\n     * @returns string The language string to use for an error message or '' if\n     * no error message.\n     */\n    function diagnose(response) {\n        // Table of error conditions.\n        // Each row is response.error, response.result, langstring\n        // response.result is ignored if response.error is non-zero.\n        // Any condition not in the table is deemed an \"Unknown runtime error\".\n        const ERROR_RESPONSES = [\n            [1, 0, 'error_access_denied'], // Sandbox AUTH_ERROR\n            [2, 0, 'error_unknown_language'], // Sandbox WRONG_LANG_ID\n            [3, 0, 'error_access_denied'], // Sandbox ACCESS_DENIED\n            [4, 0, 'error_submission_limit_reached'], // Sandbox SUBMISSION_LIMIT_EXCEEDED\n            [5, 0, 'error_sandbox_server_overload'], // Sandbox SERVER_OVERLOAD\n            [0, 11, ''], // RESULT_COMPILATION_ERROR\n            [0, 12, ''], // RESULT_RUNTIME_ERROR\n            [0, 13, 'error_timeout'], // RESULT TIME_LIMIT\n            [0, RESULT_SUCCESS, ''], // RESULT_SUCCESS\n            [0, 17, 'error_memory_limit'], // RESULT_MEMORY_LIMIT\n            [0, 21, 'error_sandbox_server_overload'], // RESULT_SERVER_OVERLOAD\n            [0, 30, 'error_excessive_output']  // RESULT OUTPUT_LIMIT\n        ];\n        for (const row of ERROR_RESPONSES) {\n            if (row[0] == response.error && (response.error != 0 || response.result == row[1])) {\n                return row[2];\n            }\n        }\n        return 'error_unknown_runtime';\n    }\n\n\n    /**\n     * Get the specified language string using\n     * AJAX and plug it into the given textarea\n     * @param {string} langStringName The language string name.\n     * @param {DOMnode} textarea The textarea into which the error message\n     * should be plugged.\n     * @param {string} additionalText Extra text to follow the result code.\n     */\n    function setLangString(langStringName, textarea, additionalText) {\n        require(['core/str'], function (str) {\n            const promise = str.get_string(langStringName, 'filter_ace_inline');\n            $.when(promise).then(function (message) {\n                textarea.show();\n                textarea.html(escapeHtml(\"*** \" + message + \" ***\\n\" + additionalText));\n            });\n        });\n    }\n\n\n    /**\n     * Concatenates the cmpinfo, stdout and stderr fields of the sandbox\n     * response, truncating both stdout and stderr to a given maximum length\n     * if necessary (in which case '... (truncated)' is appended.\n     * @param {object} response Sandbox response object\n     * @param {int} maxLen The maximum length of the trimmed stringlen.\n     */\n    function combinedOutput(response, maxLen) {\n        const limit = s => s.length <= maxLen ? s : s.substr(0, maxLen) + '... (truncated)';\n        return response.cmpinfo + limit(response.output) + limit(response.stderr);\n        return response.cmpinfo + (response.output) + (response.stderr);\n    }\n\n\n    /**\n     * Create HTML for a text area.\n     * @param {string} id for text area.\n     * @param {string} name The ID of the html textarea.\n     * @param {string} value The ID of the html textarea.\n     * @return {string} HTML string.\n     */\n    function htmlTextArea(id, name, value) {\n        return `<textarea\n                    id='${id}'\n                    class='coderunner-ui-element' \n                    name='${name}' \n                    style='width: 100%'\n                   >${value}</textarea>`;\n    }\n\n\n    /**\n     * Create HTML for an input.\n     * @param {string} id for input.\n     * @param {string} name for the html input.\n     * @param {string} label text.\n     * @param {string} value trype of the html input.\n     * @param {string} type type of the html input.\n     * @return {string} HTML string with iput and label.\n     */\n    function htmlInput(id, name, label, value, type) {\n        const checked = (value && value[0]) ? 'checked' : '';\n        const labelHtml = `<label for='${name}'>${label}</label>`;\n        const inputHtml = \"<input \" +\n                `id='${id}' ` +\n                `type='${type}' ` +\n                `${checked} ` +\n                \"class='coderunner-ui-element' \" +\n                `name='${name}' ` +\n                `value='${value}'>`;\n        return inputHtml + labelHtml;\n    }\n\n\n    /**\n     * Combine answer code with scratchpad code. If prefixAns is false:\n     * only include testCode.\n     * @param {string} answerCode text.\n     * @param {string} testCode text.\n     * @param {string} prefixAns '1' for true, '' for false.\n     * @returns {string} The combined code.\n     */\n    function combineCode(answerCode, testCode, prefixAns) {\n        let combined = prefixAns ? (answerCode + '\\n') : '';\n        combined += testCode;\n        return combined;\n    }\n\n\n    /**\n     * Insert the answer code and test code into the wrapper. This may\n     * defined by the user, in UI Params or globalextra. If prefixAns is\n     * false: do not include answerCode in final wrapper.\n     * @param {string} answerCode text.\n     * @param {string} testCode text.\n     * @param {string} prefixAns '1' for true, '' for false.\n     * @param {string} template provided in UI Params or globalextra.\n     * @returns {string} filled template.\n     */\n    function fillWrapper(answerCode, testCode, prefixAns, template) {\n        if (!prefixAns) {\n            answerCode = '';\n        }\n        template = template.replaceAll('{{ ANSWER_CODE }}', answerCode);\n        template = template.replaceAll('{{ SCRATCHPAD_CODE }}', testCode);\n        return template;\n    }\n\n\n    /**\n     * Returns a new Ace UI that serializes to the text area with provided ID.\n     * @param {string} textAreaId for ace to manage.\n     * @returns {InterfaceWrapper} new user interface wrapper containing Ace UI.\n     */\n    function newAceUiWrapper(textAreaId) {\n        let ace;\n        require(['qtype_coderunner/userinterfacewrapper'], function (uiWrapper) {\n            ace = uiWrapper.newUiWrapper('ace', textAreaId);\n        });\n        return ace;\n    }\n\n\n\n    /**\n     * Constructor for the DualBlobUi object.\n     * @param {string} textAreaId The ID of the html textarea.\n     * @param {int} width The width in pixels of the textarea.\n     * @param {int} height The height in pixels of the textarea.\n     * @param {object} uiParams The UI parameter object.\n     */\n    function DualBlobUi(textAreaId, width, height, uiParams) {\n        this.textArea = $(document.getElementById(textAreaId));\n        this.textAreaId = textAreaId;\n        this.height = height;\n        this.readOnly = this.textArea.prop('readonly');\n        this.uiParams = uiParams;\n        this.fail = false;\n\n        this.spName = uiParams.sp_name || 'Scratchpad';\n        this.spButtonName = uiParams.sp_button_name || 'Run!';\n        this.spPrefixName = uiParams.sp_prefix_name || 'Prefix Answer?';\n        this.spRunLang = uiParams.sp_run_lang || this.uiParams.lang; // use answer's ace language if not specified.\n        this.spHtmlOutput = uiParams.sp_html_out || false;\n\n        this.spRunWrapper = uiParams.sp_run_wrapper || null;\n        if (this.spRunWrapper && this.spRunWrapper === 'globalextra') {\n            this.spRunWrapper = this.textArea.attr('data-globalextra');\n        }\n\n        this.blobDiv = null;\n        this.scratchpadDiv = null;\n        this.reload(); // Draw my beautiful blobs.\n    }\n\n    DualBlobUi.prototype.failed = function () {\n        return this.fail;\n    };\n\n    DualBlobUi.prototype.failMessage = function () {\n        return 'DualBlobUiloadfail';\n    };\n\n    DualBlobUi.prototype.sync = function () {\n        const prefixAns = $(document.getElementById(this.textAreaId + '-prefix-ans'));\n        let serialisation = {\n            answer_code: this.answerTextArea.val() || '',\n            test_code: this.spCodeTextArea.val() || '',\n            show_hide: '',\n            prefix_ans: ''\n        };\n        if (this.scratchpadDiv.is(':visible')) {\n            serialisation.show_hide = '1';\n        }\n        if (prefixAns.is(':checked')) {\n            serialisation.prefix_ans = '1';\n        }\n        if (Object.values(serialisation).some((val) => val == true)) {\n            this.textArea.val(JSON.stringify(serialisation));\n        } else {\n             this.textArea.val(''); // All feilds empty...\n        }\n    };\n\n    DualBlobUi.prototype.getElement = function () {\n        return this.blobDiv;\n    };\n\n    DualBlobUi.prototype.handleRunButtonClick = async function (ajax, outputDisplayArea) {\n        this.sync(); // Use up-to-date serialization.\n\n        const htmlOutput = this.spHtmlOutput;\n        const maxLen = this.uiParams['max-output-length'] || DEFUALT_MAX_OUTPUT_LEN;\n        const preloadString = this.textArea.val();\n        const serial = JSON.parse(preloadString);\n        const params = this.uiParams.params;\n        let code;\n\n        // Clear all output areas.\n        outputDisplayArea.html('');\n        if (htmlOutput) {\n            outputDisplayArea.hide();\n        }\n        outputDisplayArea.next('div.filter-ace-inline-html').remove();\n\n        if (this.spRunWrapper) { // Wrap the code if a wrapper exists.\n            code = fillWrapper(\n                    serial.answer_code,\n                    serial.test_code,\n                    serial.prefix_ans,\n                    this.spRunWrapper\n                    );\n        } else { // No wrapper.\n            code = combineCode(serial.answer_code, serial.test_code, serial.prefix_ans);\n        }\n\n        ajax.call([{\n                methodname: 'qtype_coderunner_run_in_sandbox',\n                args: {\n                    contextid: M.cfg.contextid, // Moodle context ID\n                    sourcecode: code,\n                    language: this.spRunLang,\n                    params: JSON.stringify(params) // Sandbox params\n                },\n                done: function (responseJson) {\n                    const response = JSON.parse(responseJson);\n                    const error = diagnose(response);\n                    if (error === '') {\n                        // If no errors or compilation error or runtime error\n                        if (!htmlOutput || response.result !== RESULT_SUCCESS) {\n                            // Either it's not HTML output or it is but we have compilation or runtime errors.\n                            const text = combinedOutput(response, maxLen);\n                            outputDisplayArea.show();\n                            outputDisplayArea.html(escapeHtml(text));\n                        } else { // Valid HTML output - just plug in the raw html to the DOM.\n                            // Repeat the deletion of previous output in case of multiple button clicks.\n                            outputDisplayArea.next('div.filter-ace-inline-html').remove();\n\n                            const html = $(\"<div class='filter-ace-inline-html '\" +\n                                    \"style='background-color:#eff;padding:5px;'>\" +\n                                    response.output + \"</div>\");\n                            outputDisplayArea.after(html);\n                        }\n                    } else {\n                        // If an error occurs, display the language string in the\n                        // outputDisplayArea plus additional info.\n                        let extra = response.error == 0 ? combinedOutput(response, maxLen) : '';\n                        if (error === 'error_unknown_runtime') {\n                            extra += response.error ? '(Sandbox error code ' + response.error + ')' :\n                                    '(Run result: ' + response.result + ')';\n                        }\n                        setLangString(error, outputDisplayArea, extra);\n                    }\n                },\n                fail: function (error) {\n                    alert(error.message);\n                }\n            }]);\n    };\n\n    DualBlobUi.prototype.reload = function () {\n        const preloadString = $(this.textArea).val();\n        const answerTextAreaId = this.textAreaId + '-answer-code';\n        const spTextAreaId = this.textAreaId + '-sp-code';\n        let preload = {\n            answer_code: '',\n            test_code: '',\n            show_hide: '',\n            prefix_ans: ''\n        };\n\n        try {\n            if (preloadString) {\n                preload = JSON.parse(preloadString);\n            }\n        } catch (error) {\n            this.fail = true;\n            this.failString = 'blob_ui_invalidserialisation';\n            return;\n        }\n\n        this.drawUi(answerTextAreaId, preload);\n        this.drawScratchpadUi(spTextAreaId, preload);\n\n        this.answerCodeUi = newAceUiWrapper(answerTextAreaId);\n        this.spCodeUi = newAceUiWrapper(spTextAreaId);\n\n        // No resizing the outer wrapper. Instead, resize the two sub UIs,\n        // they will expand accordingly.\n        $(document.getElementById(this.textAreaId + '_wrapper')).css('resize', 'none');\n    };\n\n    DualBlobUi.prototype.drawUi = function (answerTextAreaId, preload) {\n        const t = this;\n        const divHtml = \"<div style='min-height:100%' class='qtype-coderunner-sp-outer-div'></div>\";\n        const answerTextAreaHtml = htmlTextArea(answerTextAreaId, 'answer_code', preload['answer_code']);\n        const showButtonHtml = \"<a \" +\n                \"class='coderunner-ui-element' \" +\n                `name='show_hide'>▼${this.spName}</a>`;\n        const answerTextArea = $(answerTextAreaHtml);\n        const showButton = $(showButtonHtml);\n        answerTextArea.attr('rows', this.textArea.attr('rows'));\n        showButton.click(function () {\n            const arrow = $(t.scratchpadDiv).is(':visible') ? '▶' : '▼';\n            t.scratchpadDiv.toggle();\n            showButton.html(arrow + t.spName);\n        });\n        this.blobDiv = $(divHtml);\n\n        this.answerTextArea = answerTextArea;\n        this.answerTextArea.attr('data-lang', this.uiParams.lang); //Set language for Ace to use.\n        this.blobDiv.append([answerTextArea, showButton]);\n\n        this.scratchpadDiv = $(divHtml);\n        if (!preload.show_hide) {\n            this.scratchpadDiv.hide();\n            showButton.html(`▶${this.spName}`);\n        }\n    };\n\n    DualBlobUi.prototype.drawScratchpadUi = function (spTextAreaId, preload) {\n        const t = this;\n        const testCodeHtml = htmlTextArea(spTextAreaId, 'test_code', preload['test_code']);\n        const prefixAnsHtml = htmlInput(this.textAreaId + '-prefix-ans','prefix_ans',\n            this.spPrefixName, preload['prefix_ans'], 'checkbox');\n        const runButton = $(\"<button type='button' \" +\n                \"class='btn btn-secondary' \" +\n                \"style='margin:6px;padding:2px 8px;'>\" +\n                `${this.spButtonName}</button>`);\n        const outputDisplayArea = $(\"<pre style='width:100%;white-space:pre-wrap;background-color:#eff;\" +\n                \"border:1px gray;padding:5px;overflow-wrap:break-word;max-height:600px;overflow:auto;'></pre>\");\n        outputDisplayArea.hide();\n        runButton.on('click', function () {\n            require(['core/ajax'], function (ajax) {\n                t.handleRunButtonClick(ajax, outputDisplayArea, preload.test_code);\n            });\n        });\n        this.spCodeTextArea = $(testCodeHtml);\n        this.spCodeTextArea.attr('data-lang', this.uiParams.lang); //Set language for Ace to use.\n        this.spCodeTextArea.attr('rows', '4'); //Set intial SP size.\n        this.scratchpadDiv.append([this.spCodeTextArea, runButton, $(prefixAnsHtml), outputDisplayArea]);\n        this.blobDiv.append(this.scratchpadDiv);\n    };\n\n    DualBlobUi.prototype.resize = function () {}; // Nothing to see here. Move along please.\n\n    DualBlobUi.prototype.hasFocus = function () { //TODO: update this method.\n        let focused = false;\n        this.blobDiv.find('textarea').each(function () {\n            if (this === document.activeElement) {\n                focused = true;\n            }\n        });\n        return focused;\n    };\n\n    // Destroy the HTML UI and serialise the result into the original text area.\n    DualBlobUi.prototype.destroy = function () {\n        this.sync();\n        $(this.blobDiv).remove();\n        this.blobDiv = null;\n    };\n\n    return {\n        Constructor: DualBlobUi\n    };\n});\n"],"names":["define","$","escapeHtml","text","map","replace","m","combinedOutput","response","maxLen","limit","s","length","substr","cmpinfo","output","stderr","htmlTextArea","id","name","value","newAceUiWrapper","textAreaId","ace","require","uiWrapper","newUiWrapper","DualBlobUi","width","height","uiParams","textArea","document","getElementById","readOnly","this","prop","fail","spName","sp_name","spButtonName","sp_button_name","spPrefixName","sp_prefix_name","spRunLang","sp_run_lang","lang","spHtmlOutput","sp_html_out","spRunWrapper","sp_run_wrapper","attr","blobDiv","scratchpadDiv","reload","prototype","failed","failMessage","sync","prefixAns","serialisation","answer_code","answerTextArea","val","test_code","spCodeTextArea","show_hide","prefix_ans","is","Object","values","some","JSON","stringify","getElement","handleRunButtonClick","async","ajax","outputDisplayArea","htmlOutput","preloadString","serial","parse","params","code","answerCode","testCode","template","html","hide","next","remove","replaceAll","combined","combineCode","call","methodname","args","contextid","M","cfg","sourcecode","language","done","responseJson","error","ERROR_RESPONSES","row","result","diagnose","after","show","extra","langStringName","textarea","additionalText","str","promise","get_string","when","then","message","alert","answerTextAreaId","spTextAreaId","preload","failString","drawUi","drawScratchpadUi","answerCodeUi","spCodeUi","css","t","divHtml","answerTextAreaHtml","showButtonHtml","showButton","click","arrow","toggle","append","testCodeHtml","prefixAnsHtml","label","type","checked","labelHtml","htmlInput","runButton","on","resize","hasFocus","focused","find","each","activeElement","destroy","Constructor"],"mappings":"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"}